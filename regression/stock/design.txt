1.训练集和测试集
    特征：前10日涨幅和换手率
    label：当日涨幅
    随机提取10%的数据作为测试集，其他做训练集

2.测试
    对测试数据逐个预测得到预测值
    以某个交易规则模拟预测交易，根据实际涨幅计算收益率，累加收益率
    输出累加收益率


2018-11-20
以10d数据预测2d后的收盘较1d后收盘价涨幅
交易策略：1d后的收盘涨幅小于9的前10

2018-12-24
还需要2个function：
1. 输出过去10天的预测值，对比成功交易和失败交易的过于10天预测值的规律
    在tushare_data.py中增加 referfence_feature_count ，用于设置决策预测数量
2. 测试逻辑，增加买入后的监控处理，修改卖出条件，买入后每天对其预测，当predict值小于一定门限时卖出。减少损失
    a. 修改测试数据格式，改为predict_day_count数量的feature+每天的 open, close, 修改后：
        pridcit day feature， acture_data， code, date
        T1 feature, acture_data， code, date
        T2 feature, acture_data， code, date
        ...
        Td feature, acture_data， code, date
            acture_data: open_increase, low_increase, open, low, close, 
    b. 修改预测逻辑，根据pridcit day feature 及 T1 acture_data 决定是否买入，根据T1～Td的prediction决定是否中途卖出，如果有中途卖出则次日开盘卖出，卖出价为次日open，如果没有中途卖出则卖出价为Td_close

2019-01-06
修改训练数据生成逻辑对每个stock的数据，支持任意上市日期的个股。

2019-01-12
stock_data, preprocessd_data 不再区分 train 和 test
所有 stock_data 的下载数据起始时间都从2010-01-01开始，preprocessd_data 从所有下载数据转换
训练数据、测试数据、预测数据 不指定天数，只指定以下内容，所有date设置为字符串全局变量。
1. stocks_list_end_date - 上市日期门限
2. train_data_start_date, train_data_end_date
3. test_data_start_date, test_data_end_date
4. predict_date
5. train_test_date

V1.0.0
2019-01-12
train 和 test 数据一次生成，处理过程：
preprocessd 简写为 pp
1. 分别计算 train 和 test 数据在 pp_data 中的 
   train_pp_start_date, 
   train_pp_end_date, 
   test_pp_start_date, 
   test_pp_end_date
2. 对个股的 pp_data，提取 train_pp_data 和 test_pp_data，
   分别生成个股的 stock_train_data 和 stock_test_data, 合并到全局train_data 和 test_data
   每条记录的date以 TD 为准

test过程:
1. 从 tushare_data 获取测试日期列表 test_date_list
2. 逐个日期trade_date in reversed(test_date_list)，取TD date为trade_date的所有数据 day_test_data
3. 处理 day_test_data

trade_date_data用于生成predict数据，predict不保存processed数据，只保存最终数据

V1.0.1
2019-01-19
修改 test.py result数据改为一次生成（result_all），每天的 result 直接从 result_all 中按 Td_trade_date 字段选择。

V1.0.2
2019-01-20
test.py 支持label_type 支持T1_open to Td_close
支持 predict_day_count 和 max_predict_day_count
支持按行业类别生成训练数据和测试数据

V1.0.3
Fix bug: Test feature day index error.

V1.0.4
添加行业分类描述

V1.0.5
2019-02-07
1. 修复bug：LABEL_T1_OPEN_2_TD_CLOSE lable模式，T1_OPEN 数据指针错误

2. 增加连续上涨分数 label，训练数据计算未来1天-max_predict_day_count天的累计上涨分数最大值，
预测值大于0即可买入。
计算方法：
每天的上涨分数 = close_increase_ratio - 9.0 (%10 -> 1, %0 -> -9)
累计上涨分数 = 对每天的上涨分数求和
x天累计上涨分数最大值 = 1 ～ x 天 累计上涨分数中的最大值（x个）
累计上涨分数最大值 label 的目标是筛选数从 T1 天开始大幅连续上涨的数据

3. 支持行业分别列表

V1.0.6
2019-02-07
1. 支持 LABEL_T1_OPEN_2_TD_OPEN label 模式
2. 支持 code_filter 筛选
3. 分析模型性能不稳定的原因
4. 支持模型稳定性自动测试（测试结果方差 variance）

V1.0.7
2019-02-17
1. 支持 hk 港股通数据向 tushare 数据格式的转换
2. 不从数据源文件中读取 pre_close 避免 pre_close 数据错误
3. industry_filter 支持 ‘hk’，输出港股通所有 ts_code
4. proprocess 增加对无效数据的判断

V1.0.8
2019-02-23
1. 特征支持G7_10AVG102_10D8，全局7个特征，avg10 2个特征，日线8个特征
2. 不从数据源文件中读取 pre_close 避免 pre_close 数据错误
3. industry_filter 支持 ‘hk’，输出港股通所有 ts_code
4. proprocess 增加对无效数据的判断
5. 支持 breakup 交易方法测试

V1.0.9
2019-03-09
1. 支持 breakup_filter.py ，指定一个时间段-breakup_filter_days，例如 10 天，搜索此时间段内符合 breakup 条件的个股
    1.1 根据设置计算需要下载数据的天数，下载数据
    1.2 获取股票列表，遍历列表，对每个股票提取数据，判断数据量是否有效，preprocess
    1.3 对每个股票遍历 breakup_filter_days ，打印 breakup 事件信息
2. 统计均线以上的股票数量和均线以下的股票数量，每天一个数据，分析此序列与大盘走势的关系。

V1.0.10
2019-03-30
1. 修改特征，只使用日线数据，不使用每日指标，通过配置与原有特征区分
    a：将换手率改为成交量/成交量100均值，此特征体现成交量的波动情况，open,close,high,low，通过 与100 close 均值体现
    b: 直接使用成交量、价格预测（效果不好）
2. 支持周线数据预测
    周线的特征通过日线计算，支持 G0_D5 特征， 其中的open,close,high,low, 通过计算5天时间段的 open, close, 最高价,最低价得到

V1.0.11
2019-04-07
show.py 优化日期显示、增加成交量显示
breakup_trade_test.py:
软件服务40支，close 10 break 200，5049
软件服务40支，close 10 break 100，5710
软件服务40支，close  5 break 100，4393

V1.0.12
1. 对比牛市时间区间和熊市时间区间的平均收益率（总收益/交易次数）：
    20170101-20180101：< 0
    20180101-20190101：< 0
2. 建立峰谷模型
    维护一个当前状态 current_status（init/up/down），状态变化时产生 峰(peak)/谷(valley) 
    AppendWaveData 向 pp_data 中添加字段 peak(bool) valley(bool) wave_status(init/up/down)
    wave_status 的计算：指定最小波动宽度 min_wate_width，
        如果当前价格是过去 min_wate_width 和未来 min_wate_width 范围内的最高点视为波峰
        如果当前价格是过去 min_wate_width 和未来 min_wate_width 范围内的最低点视为波谷
        记录 current_extreme ，如果是波峰则之后的状态为down，反之为up
        对于 first_extreme，需填充其前端状态，如果first_extreme为波峰则填充up，反之填充down
    交易条件：
        买入：
            1.当前价格高于上一个峰值，
            2.最新出现的波谷高于上一个波谷
        卖出：
            1.最新出现的波峰低于上一个波峰，
            2.最新出现的波谷低于上一个波谷，
            3.亏损超出止损率
    软件服务40支，
        min_wave_width=1, 6124
        min_wave_width=2, 6861
        min_wave_width=3, 6723
        min_wave_width=4, 6813
        min_wave_width=5, 
        min_wave_width=10, 
    所有行业1566支20180101前平均收益，min_wave_width=1：128.69
    筛选方案：按照过去的收益率总和排序，从软件服务40支中选择20180101前收益率最高的前10支，对比测试：
        min_wave_width=1， 20180101-20190101
            软件服务40支平均收益：14.00
            软件服务40选10平均收益：19.17
            所有行业1566支平均收益：5.52
            所有行业1566选20平均收益：6.33
    筛选方案：按照过去的收益率总和排序，20180101-20180701收益率最高的前20支，对比测试：
        min_wave_width=1， 20180701-20190101
            所有行业1566支平均收益：5.29
            所有行业1566选20平均收益：3.07
            所有行业1566反向选20平均收益：3.07
    筛选方案：流通市值
        min_wave_width=1， 20180101-20190101
            20亿内117支：12.87
            10亿内4支：20.55
            15亿内25支：20.64
    筛选方案：2016年财报较前两年净利润增加
        min_wave_width=2， 20160101-20190101
            软件服务40支平均收益：-10.59
            软件服务40选平均收益：-10.59
            
V1.0.13
2019-05-17
1. 以 wave_test 的测试数据作为训练数据训练模型
    特征：FEATURE_G0_10D5
    label：wave_test 收益
    对比测试：
        min_wave_width=2， 20180101-20190101
            所有行业1566支平均收益：-4.79
            regression 预测大于10的平均收益：1 左右
        min_wave_width=2， 20180101-20190411
            所有行业1566支平均收益：1.65
            regression 预测大于10的平均收益：4.0
    特征：FEATURE_G0_10D10
    label：wave_test 收益
    对比测试：
        stocks_list_end_date = '20160101'
        训练数据：20000101-20180101前，测试数据：20180101-20190414
            min_wave_width=2，
            trade_off_threshold = 0
            up_100avg_condition = True
            up_200avg_condition = False
                所有行业2797支平均每次交易收益：1.42，平均每天收益：0.14
                regression 预测大于5的平均收益：3.56，平均每天收益：0.34

            min_wave_width=2，
            trade_off_threshold = 0
            up_100avg_condition = False
            up_200avg_condition = False
                所有行业2797支平均每次交易收益： 0.69 ，平均每天收益： 0.07
                regression 预测大于5的平均收益： 2.63 ，平均每天收益： 0.24

            min_wave_width=5，
            trade_off_threshold = 0
            up_100avg_condition = True
            up_200avg_condition = False
                所有行业2797支平均每次交易收益： -0.25 ，平均每天收益： -0.01
                regression 预测大于5的平均收益： 2.38 ，平均每天收益： 0.14

2. 分析 wave_test 交易频率和收益率的关系
    图表显示，一段时间内，每天的持仓数量和所持仓的这些股票的平局收益率
3. 特征加入holding_stocks_num
    已完成

4. wave_test_daily 的预测算法：
    首先生成 wave_test_daily 的 data_set，与训练用 data_set 结构类似，区别是加入未开始和未结束的交易记录，wave_test_daily
    对 data_set 进行测试。
    设计方案：
        1. wave_kernel.TradeTest 接口增加设置 save_unfinished_dataset 默认值 False
        2. 添加 SaveDailyDataset 和 GetDailyDataset 接口
        交易类型    预买入日期      买入日期    卖出日期
        已完成      有效日期       有效日期     有效日期
        未开始      有效日期        0          0
        未完成      有效日期        有效日期    0

5. wave_kernel 中加入成交量的判断，对比测试：
        不判断成交量：平均每次收益：1.41
        最近5日平均成交量/前5日最近成交量>1.2：平均每次收益：3.9

6. wave 数据集的采集，在pre_on_date 后采集n天的dateset，天数通过 wave_kernel.trade_collect_dataset_num 控制

7. wave_test_daily 有bug，持有数量和 wave_test 的数量不一致。

8. 优化 wave_test 交易频率和收益率的关系
    数据源：dataset
    获取交易日列表，计算每个交易日的 
        1.持有数量，
        2.当天 pre_on 的交易平均收益率，
        3.计算未来3天 pre_on 的交易平均收益率
            
V1.0.14
2019-06-03
1. 性能最优模型，平均每次交易收益率11.20，日平均收益率0.72，最大回撤28.92

V1.0.15
2019-06-03
1. 增加 RegressionTestMaxTradeOneDay（已完成）
2. 对每个 wave_test 交易多次采样，on_date 后采样多条数据加入dataset，通过 wave_test_dataset_sample_num 控制
3. 使用 daily data 更新 PPMergeData 
    获取最近100条date list，查找最近的 PPMergeData 的 date_index ，如果没有找到，返回错误
    遍历 reversed(range(0,date_index)),更新每一天的PPMergeData

V1.0.16
1. 优化 pp_daily_update, 支持多天数据一次update

V1.0.17
1.修复 wave test daily 数据和个股 pp 数据测试结果不一致的问题

V1.0.18
1.支持RNN网络

V1.0.19
1. 增加特征，过去10天，每天的:
    pre_trade_stock_num 比例，
    holding_num 比例，
    avg_100_up_num 比例
    方案：
        A.
            1.在生成 dataset 特征时插入每天的日期（已完成），
            2.AppendGlobalFeatures 时通过此日期查找全局特征（已完成 pre_trade_stock_num）
                生成 date ~ xx_num 映射列表
                遍历每1条记录的每个日期，从映射列表中查找此日期，如果没有找到则删除这条记录
        B（暂不实现）.删除不连续的 dataset 记录，AppendGlobalFeatures 时通过一个日期连续插入10条连续的记录
            删除 不连续的 dataset 记录 的方案：在全局 date_list 中找到特征的最近日期，
            判断最远日期是否与 date_list 中前 feature_relate_days 的值相等
    pre_trade_stock_num 比例（未完成），计算比例需要获取每天的正常交易的个股数量，无法实现，
        因此需要将 stocks_list_end_date 设置为 wave_kernel.start_date 之前，以保证 dataset中的 pre_trade_stock_num 在时间维度均衡
2. （暂不实现）dataset 相关数据中删除跌幅超过40%的数据，在 wave_kernel.GetTrainDataUnit() 中处理

V1.0.20
1. test.py 和 predict.py 统一核心算法
    添加文件 features.py  AppendFeature AppendLabel AppendActureData 转移到此文件中
    train test predict 统一数据格式，都包括 feature label acture_data, dataset 不区分 train 和 test
    只区分 fix_dataset 和 fix_dataset_daily，从 fix_dataset 提取训练集和测试集，通过 acture_data 的日期分割训练集和测试集

    添加文件 dataset.py 生成 fix_dataset 和 fix_dataset_daily

    predict.py 生成 test_data_daily_...npy，添加 label 和 acture_data 时 将未来的数据设置为无效值
    （label 和 price都设置为0，日期设置为20990101），遍历日期列表不使用tushare获取的日期列表，改为使用
    test_data 中提取的日期列表

V1.0.21
    抽查训练数据。
    对比fix_dataset 和 tushare_data的结果

V1.0.22
1. 根据预测结果决定卖出时间